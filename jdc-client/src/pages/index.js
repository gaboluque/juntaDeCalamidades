import Head from 'next/head'
import styles from '../styles/Home.module.css'
import { useEffect, useState } from "react";
import { io } from "socket.io-client";
import ChatRoom from "../components/ChatRoom";
import LogIn from "../components/LogIn";
import axios from "axios";
import { PixelBoard } from "../components/PixelBoard";
import { serverUrl } from "../utils/constants";
import { connectToSocket } from "../services/jdcServer";


export default function Home() {
  const [isConnected, setIsConnected] = useState(false);
  const [socket, setSocket] = useState(null);
  const [messages, setMessages] = useState([]);
  const [username, setUsername] = useState(null);
  const [messageColor, setMessageColor] = useState(null);
  const [board, setBoard] = useState([]);

  useEffect(() => {
    const newSocket = connectToSocket();

    // Message from server
    newSocket.on('message', (message) => {
      setMessages((msgs) => [...msgs, message]);
    });

    newSocket.on("connect", () => {
      setSocket(newSocket);
    });

    newSocket.on("welcome", (message) => {
      setMessages((msgs) => [...msgs, message]);
      setIsConnected(true);
    });

    newSocket.on("board", (board) => {
      setBoard(board);
    });

    newSocket.on("pixelAdded", (pixel) => {
      const newBoard = [...board];
      newBoard[pixel.y][pixel.x] = pixel.color;
      setBoard(newBoard);
    });

    newSocket.on("error", (message) => {
      alert(message);
    });

    setSocket(newSocket);

    return () => {
      newSocket.close();
    }

  }, []);

  const handleConnect = (username, color) => {
    if (socket) {
      socket.emit("joinRoom", { username });
      setUsername(username);
      setMessageColor(color);
    }
  }

  const handleSubmit = async (message) => {
    if (message.length) {
      socket.emit('chatMessage', { message, color: messageColor });
    }
  }

  const handlePixelAdded = async (x, y, color) => {
    socket.emit('pixelAdded', { x, y, color });
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/public/favicon.ico"/>
      </Head>
      <main className={styles.main}>
        {
          isConnected
            ? <ChatRoom board={board} onPixelClick={handlePixelAdded} username={username} messages={messages}
                        handleSendMessage={handleSubmit}/>
            : <LogIn onSubmit={handleConnect}/>
        }
      </main>
    </div>
  )
}
